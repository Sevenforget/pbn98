import type { ApiPostResponse, Post } from "./types";
import { ApiError } from "./types";
import { getCurrentProjectDomain } from "./domain-mapper";

// API 기본 설정
const API_BASE_URL = "http://43.203.241.93:4000";
const API_ENDPOINT = "/api/pbn-posts/find";
const REQUEST_TIMEOUT = 10000; // 10초

// API 요청 파라미터 타입
interface ApiRequestParams {
  community_url: string;
  post_id: number;
}

/**
 * API 응답을 기존 Post 타입으로 변환하는 함수
 */
export function createPostFromApiResponse(apiResponse: ApiPostResponse): Post {
  // tags 문자열을 배열로 변환 (쉼표로 구분)
  const tagsArray = apiResponse.tags
    ? apiResponse.tags
        .split(",")
        .map((tag) => tag.trim())
        .filter((tag) => tag.length > 0)
    : [];

  return {
    id: apiResponse.id,
    title: apiResponse.title,
    content: apiResponse.content,
    author: apiResponse.author_name,
    tags: tagsArray,
    date: apiResponse.post_date,
    createdAt: apiResponse.created_at,
    excerpt: apiResponse.summary,
    slug: `${apiResponse.id}`, // ID를 slug로 사용
    readTime: "5분 읽기", // 기본값 설정
  };
}

/**
 * API 호출을 위한 fetch 래퍼 함수
 */
async function apiRequest<T>(params: ApiRequestParams): Promise<T> {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINT}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(params),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      const errorData = await response.json().catch(() => null);
      throw new ApiError(
        response.status,
        `API 요청 실패: ${response.status} ${response.statusText}`,
        errorData
      );
    }

    const data = await response.json();
    return data;
  } catch (error) {
    clearTimeout(timeoutId);

    if (error instanceof Error && error.name === "AbortError") {
      throw new ApiError(408, "API 요청 시간 초과");
    }

    if (error instanceof ApiError) {
      throw error;
    }

    const errorMessage =
      error instanceof Error ? error.message : "알 수 없는 오류";
    throw new ApiError(0, `네트워크 오류: ${errorMessage}`);
  }
}

/**
 * 게시물 데이터를 API에서 가져오는 함수
 */
export async function fetchPostFromApi(
  communityUrl: string,
  postId: number
): Promise<Post> {
  try {
    const apiResponse = await apiRequest<ApiPostResponse>({
      community_url: communityUrl,
      post_id: postId,
    });

    // API 응답 검증
    if (!apiResponse || typeof apiResponse !== "object") {
      throw new ApiError(500, "잘못된 API 응답 형식");
    }

    if (!apiResponse.title || !apiResponse.content) {
      throw new ApiError(500, "필수 게시물 데이터가 누락됨");
    }

    return createPostFromApiResponse(apiResponse);
  } catch (error) {
    console.error("API 호출 중 오류 발생:", error);
    throw error;
  }
}

/**
 * 여러 게시물을 가져오는 함수 (향후 확장용)
 */
export async function fetchMultiplePostsFromApi(
  communityUrl: string,
  postIds: number[]
): Promise<Post[]> {
  const promises = postIds.map((id) =>
    fetchPostFromApi(communityUrl, id).catch((error) => {
      console.warn(`게시물 ID ${id} 가져오기 실패:`, error);
      return null;
    })
  );

  const results = await Promise.all(promises);
  return results.filter((post): post is Post => post !== null);
}


/**
 * 서버사이드용: 현재 프로젝트 도메인을 자동 감지하여 포스트를 가져오는 함수
 */
export async function fetchPostFromApiWithAutoDomain(postId: string | number): Promise<Post> {
  const domain = getCurrentProjectDomain();
  return fetchPostFromApi(domain, Number(postId));
}

/**
 * 클라이언트사이드용: window.location을 이용해 도메인을 감지하여 포스트를 가져오는 함수
 */
export async function fetchPostFromApiClient(postId: string | number): Promise<Post> {
  // 클라이언트에서는 현재 호스트를 기본값으로 사용
  const currentHost = typeof window !== 'undefined' ? window.location.origin : 'https://example.com';
  return fetchPostFromApi(currentHost, Number(postId));
}

// getCurrentProjectDomain 함수도 export
export { getCurrentProjectDomain } from "./domain-mapper";
